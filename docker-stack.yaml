services:
  # ==================== Traefik (Reverse Proxy + HTTPS) ====================
  traefik:
    image: traefik:v2.10
    command:
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@vstrechya.space"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "traefik-letsencrypt:/letsencrypt"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
      labels:
        # Force HTTPS redirect
        - "traefik.http.routers.redirect-to-https.rule=hostregexp(`{host:.+}`)"
        - "traefik.http.routers.redirect-to-https.entrypoints=web"
        - "traefik.http.routers.redirect-to-https.middlewares=redirect-to-https"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

  # ==================== Backend (FastAPI) ====================
  backend:
    image: cr.yandex/crpp7grglk5oa2671pne/udb-back:latest
    entrypoint: ["bash", "entrypoint.sh"]
    command: uvicorn src.main:app --host=0.0.0.0 --port=8000 --workers=4
    environment:
      - DEBUG=${DEBUG}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=db
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
      - SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}
      - DOMAIN=${DOMAIN}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - MAIL_FROM=${MAIL_FROM}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_SERVER=${MAIL_SERVER}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - AWS_S3_ENDPOINT_URL=${AWS_S3_ENDPOINT_URL}
      - AWS_DEFAULT_ACL=${AWS_DEFAULT_ACL}
      - AWS_S3_USE_SSL=${AWS_S3_USE_SSL}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOST=elasticsearch
      - ELASTIC_PORT=${ELASTIC_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`backend.dpo.vstrechya.space`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
        - "traefik.http.services.backend.loadbalancer.server.port=8000"
      replicas: 2
      update_config:
        parallelism: 1
        delay: 120s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
      restart_policy:
        condition: on-failure
        max_attempts: 3
    depends_on:
      - db
      - elasticsearch
      - redis
    restart: unless-stopped

  # ==================== Frontend (Vite) ====================
  frontend:
    image: cr.yandex/crpp7grglk5oa2671pne/udb-front:latest
    environment:
      - VITE_API=https://backend.dpo.vstrechya.space
      - VITE_IS_DEV=false
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`front.dpo.vstrechya.space`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
        - "traefik.http.services.frontend.loadbalancer.server.port=5000"
      replicas: 2
      update_config:
        parallelism: 1
        delay: 120s
        order: stop-first
        failure_action: rollback
        monitor: 30s
      rollback_config:
        parallelism: 0
      restart_policy:
        condition: on-failure
        max_attempts: 3
    restart: unless-stopped

  # ==================== PostgreSQL ====================
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==================== Redis ====================
  redis:
    image: redis:latest
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    volumes:
      - redisdata:/data
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default on nopass ~* +@all" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==================== Elasticsearch ====================
  elasticsearch:
    image: elasticsearch:8.15.3
    volumes:
      - ./elastic_config.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - esdata:/usr/share/elasticsearch/data
    environment:
      - ES_JAVA_OPTS=-Xmx512m -Xms512m
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - discovery.type=single-node
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ==================== MinIO (S3 Storage) ====================
  minio:
    image: minio/minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - miniodata:/data
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.minio.rule=Host(`minio.dpo.vstrechya.space`)"
        - "traefik.http.routers.minio.entrypoints=websecure"
        - "traefik.http.routers.minio.tls.certresolver=letsencrypt"
        - "traefik.http.services.minio.loadbalancer.server.port=9000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped

volumes:
  traefik-letsencrypt:
  pgdata-volume:
  redisdata:
  esdata:
  miniodata: